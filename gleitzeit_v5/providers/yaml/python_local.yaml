name: python-local
protocol: python
version: v1
description: Local Python code execution provider with sandboxed environment
executor: python-local
capabilities:
  - python_execution
  - code_execution
  - parameter_substitution
  - result_extraction

connection:
  type: local
  python_executable: python3
  timeout: 30
  max_memory_mb: 512
  working_directory: /tmp/gleitzeit_python
  sandbox_enabled: true

authentication:
  type: none  # Local execution doesn't require authentication

metadata:
  provider_type: local
  execution_environment: subprocess
  python_version: "3.8+"
  supported_libraries:
    - math
    - json
    - datetime
    - os
    - sys
    - collections
    - itertools
    - functools
    - operator
  security:
    sandboxed: true
    network_access: false
    file_system_access: limited
    import_restrictions: true
  features:
    - code_execution
    - variable_extraction
    - parameter_substitution
    - error_handling
    - output_capture
  limitations:
    max_execution_time: 300
    max_memory_usage: 512
    no_network_access: true
    restricted_imports: true

examples:
  - name: simple_calculation
    description: Basic mathematical calculation
    method: python/execute
    parameters:
      code: |
        result = 2 + 3 * 4
        print(f"Calculation result: {result}")
    expected_response_fields:
      - result
      - output
      - success

  - name: fibonacci_sequence
    description: Generate Fibonacci numbers
    method: python/execute
    parameters:
      code: |
        def fibonacci(n):
            if n <= 1:
                return n
            return fibonacci(n-1) + fibonacci(n-2)
        
        result = fibonacci(10)
        print(f"Fibonacci(10) = {result}")
    expected_response_fields:
      - result
      - output
      - success

  - name: parameter_substitution
    description: Code with parameter substitution
    method: python/execute
    parameters:
      code: |
        input_value = ${previous-task.result}
        result = input_value * 2
        print(f"Double of {input_value} is {result}")
    expected_response_fields:
      - result
      - output
      - success

  - name: data_processing
    description: Process data with context
    method: python/execute
    parameters:
      code: |
        numbers = context.get('numbers', [1, 2, 3, 4, 5])
        result = sum(numbers) / len(numbers)
        print(f"Average: {result}")
      context:
        numbers: [10, 20, 30, 40, 50]
    expected_response_fields:
      - result
      - output
      - success